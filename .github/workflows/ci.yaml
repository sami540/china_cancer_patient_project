name: CI Pipeline

on:
  push:
    branches:
      - main
      - master

jobs:
  project-testing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc

      - name: Run DVC pipeline
        run: dvc repro

      - name: Run model tests
        run: python -m unittest tests/test_model.py

      - name: Promote model to production
        if: success()
        run: python scripts/promote_model.py

      - name: Run Flask app tests
        if: success()
        run: python -m unittest tests/test_flask_app.py

      # ----------------------------------------------------------------
      # ðŸ§± Local Docker + Minikube Deployment (No AWS)
      # ----------------------------------------------------------------

      - name: Start Minikube
        run: |
          sudo apt-get update -y
          sudo apt-get install -y conntrack
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube start --driver=docker

      - name: Build Docker image for local Minikube
        run: |
          eval $(minikube docker-env)
          docker build -t asthma-app:latest .

      - name: Verify image built inside Minikube
        run: docker images | grep asthma-app

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Create Kubernetes Secret (local)
        run: |
          kubectl create secret generic capstone-secret \
            --from-literal=CAPSTONE_TEST=${{ secrets.CAPSTONE_TEST }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to local Kubernetes (Minikube)
        run: |
          kubectl apply -f deployment.yaml
          kubectl get pods -A

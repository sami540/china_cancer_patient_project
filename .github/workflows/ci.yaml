name: CI Pipeline (Local)

on:
  push:
    branches:
      - main
      - master

jobs:
  local-mlops-pipeline:
    runs-on: ubuntu-latest

    steps:
      # ------------------------------
      # 1. Checkout Code
      # ------------------------------
      - name: Checkout code
        uses: actions/checkout@v3

      # ------------------------------
      # 2. Set up Python
      # ------------------------------
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # ------------------------------
      # 3. Cache pip Dependencies
      # ------------------------------
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ------------------------------
      # 4. Install Dependencies
      # ------------------------------
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc mlflow

      # ------------------------------
      # 5. Set up MLflow Tracking (Local)
      # ------------------------------

      - name: Start MLflow Tracking Server
        run: |
         nohup mlflow server \
         --backend-store-uri sqlite:///mlflow.db \
         --default-artifact-root ./mlruns \
         --host 127.0.0.1 \
         --port 5000 &
         sleep 10
        env:
          MLFLOW_TRACKING_URI: http://127.0.0.1:5000
   

      # ------------------------------
      # 6. Run DVC Pipeline
      # ------------------------------
      - name: Run DVC pipeline
        run: |
          echo "Running DVC pipeline..."
          dvc repro

      # ------------------------------
      # 7. Run Model Tests
      # ------------------------------
      - name: Run unit tests for model
        run: |
          echo "Running model unit tests..."
          python -m unittest tests/test_model.py

      # ------------------------------
      # 8. Promote Model to Production
      # ------------------------------
      - name: Promote model to production
        if: success()
        run: |
          echo "Promoting best model to production..."
          python scripts/promote_model.py

      # ------------------------------
      # 9. Run Flask App Tests
      # ------------------------------
      - name: Run unit tests for Flask app
        run: |
          echo "Running Flask app unit tests..."
          python -m unittest tests/test_flask_app.py

      # ------------------------------
      # 10. Build Docker Image
      # ------------------------------
      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t mlops-local-app:latest .

      # ------------------------------
      # 11. Verify Docker Image
      # ------------------------------
      - name: Verify Docker image
        run: docker images mlops-local-app

      # ------------------------------
      # 12. Run Container (Optional Test)
      # ------------------------------
      - name: Run container locally (optional test)
        run: |
          echo "Starting Docker container..."
          docker run -d -p 5000:5000 mlops-local-app:latest
          sleep 10
          docker ps

      # ------------------------------
      # 13. Stop & Remove Container
      # ------------------------------
      - name: Stop and remove container
        if: always()
        run: |
          echo "Cleaning up containers..."
          docker stop $(docker ps -q --filter ancestor=mlops-local-app:latest) || true
          docker rm $(docker ps -a -q --filter ancestor=mlops-local-app:latest) || true

      # ------------------------------
      # 14. (Optional) Local Kubernetes via Minikube
      # ------------------------------
      - name: Start Minikube (Local K8s)
        run: |
          echo "Starting Minikube..."
          minikube start
          kubectl get nodes

      - name: Build Docker image inside Minikube
        run: |
          echo "Building image inside Minikube..."
          eval $(minikube docker-env)
          docker build -t mlops-k8s-app:latest .

      - name: Deploy app to Minikube
        run: |
          echo "Deploying app on Minikube cluster..."
          kubectl apply -f deployment.yaml
          kubectl get pods
          kubectl get svc

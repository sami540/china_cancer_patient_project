# name: CI Pipeline (Local)

# on:
#   push:
#     branches:
#       - main
#       - master

# jobs:
#   local-mlops-pipeline:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Cache pip dependencies
#         uses: actions/cache@v3
#         with:
#           path: ~/.cache/pip
#           key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
#           restore-keys: |
#             ${{ runner.os }}-pip-

#       - name: Install dependencies
#         run: |
#           pip install -r requirements.txt
#           pip install dvc mlflow

#       - name: Set up MLflow tracking directory
#         run: |
#           mkdir -p mlruns
#           echo "MLflow tracking set to local directory."
#         env:
#           MLFLOW_TRACKING_URI: "file://$(pwd)/mlruns"    


#       - name: Run DVC pipeline
#         run: |
#           echo "Running DVC pipeline..."
#           dvc repro    

#       - name: Run unit tests for model
#         run: |
#           echo "Running model unit tests..."
#           python -m unittest tests/test_model.py    

#       - name: Promote model to production
#         if: success()
#         run: |
#           echo "Promoting best model to production..."
#           python scripts/promote_model.py    

#       - name: Run unit tests for Flask app
#         run: |
#           echo "Running Flask app unit tests..."
#           python -m unittest tests/test_flask_app.py    


#       - name: Build Docker image
#         run: |
#           echo "Building Docker image..."
#           docker build -t mlops-local-app:latest .

#       - name: Verify Docker image
#         run: docker images mlops-local-app

#       # ------------------------------
#       # 12. Run Container (Optional Test)
#       # ------------------------------
#       - name: Run container locally (optional test)
#         run: |
#           echo "Starting Docker container..."
#           docker run -d -p 5000:5000 mlops-local-app:latest
#           sleep 10
#           docker ps

#       - name: Stop and remove container
#         if: always()
#         run: |
#           echo "Cleaning up containers..."
#           docker stop $(docker ps -q --filter ancestor=mlops-local-app:latest) || true
#           docker rm $(docker ps -a -q --filter ancestor=mlops-local-app:latest) || true

#       - name: Start Minikube (Local K8s)
#         run: |
#           echo "Starting Minikube..."
#           minikube start
#           kubectl get nodes

#       - name: Build Docker image inside Minikube
#         run: |
#           echo "Building image inside Minikube..."
#           eval $(minikube docker-env)
#           docker build -t mlops-k8s-app:latest .

#       - name: Deploy app to Minikube
#         run: |
#           echo "Deploying app on Minikube cluster..."
#           kubectl apply -f deployment.yaml
#           kubectl get pods
#           kubectl get svc
